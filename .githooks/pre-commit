#!/bin/bash

SWIFTLINT_PATH="$(pwd)/GaeManda/swiftlint"

if [[ -e "${SWIFTLINT_PATH}" ]]; then
	echo "🔍 SwiftLint 검사 경로: $(pwd)"
  echo "🚀 SwiftLint 검사 중..."
  echo ""
else
	echo "SwiftLint가 존재하지 않습니다.\n"
	exit 1
fi

changed_files=$(git diff --stat --cached)
upstream_branch=$(git for-each-ref --format='%(upstream:short)' $(git symbolic-ref -q HEAD)) 
swift_files=$(git diff --stat --cached --diff-filter=d --name-only $upstream_branch | grep -E "\.swift$")

if [ -n "$changed_files" ] && [ -z "$swift_files" ]; then
  echo "🙆🏻‍♂️ 커밋 성공."
  exit 0
elif [ -z "$changed_files" ] || [ -z "$swift_files" ]; then
  echo "🙋🏻‍♂️ 스테이징 영역에 파일이 없습니다."
  exit 1
fi

lint_result=$($SWIFTLINT_PATH lint --quiet --config .swiftlint.yml)

echo ""
echo "🚀 swiftlint 검사 완료."

if [ -z "$lint_result" ]; then
	echo "❤️  작성한 코드가 SwiftLint에 맞습니다."
  echo "🙆🏻‍♂️ 커밋 성공."
else
	echo ""
	printf "💔 SwiftLint에 어긋나는 코드가 있습니다. 아래 내용을 확인해주세요.\n\n"

  while IFS=':' read -r file_path \
                        line_number \
                        column_number \
                        error_type \
                        error_message \
                        error_description; do
    icon="🚧"
    if [ "$error_type" = " error" ]; then
      icon="🚨"
    fi

    echo "$icon$error_type"
    echo "┗ $file_path:$line_number:$column_number"
    echo "┗$error_message:$error_description"
    echo ""
    
  done <<< "$lint_result"

  echo "🙅🏻‍♂️ 커밋 실패. SwiftLint에 맞게 코드를 변경해주세요."
  exit 1
fi
