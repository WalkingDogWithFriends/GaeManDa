// swiftlint:disable all
// swift-format-ignore-file
// swiftformat:disable all
// Generated using tuist â€” https://github.com/tuist/tuist

{% if catalogs %}
{% set enumName %}{{param.name}}{% endset %}
{% set arResourceGroupType %}{{param.name}}ARResourceGroup{% endset %}
{% set colorType %}{{param.name}}Colors{% endset %}
{% set forceNamespaces %}{{param.forceProvidesNamespaces|default:"false"}}{% endset %}
{% set bundleToken %}{{param.name}}Resources{% endset %}
{% set accessModifier %}{% if param.publicAccess %}public{% else %}internal{% endif %}{% endset %}
{% if resourceCount.arresourcegroup > 0 %}
  import ARKit
{% endif %}
import UIKit

// swiftlint:disable superfluous_disable_command file_length implicit_return
// MARK: - Implementation Details


{% if resourceCount.arresourcegroup > 0 %}
{{accessModifier}} struct {{arResourceGroupType}} {
	{{accessModifier}} fileprivate(set) var name: String
	
#if os(iOS)
	@available(iOS 11.3, *)
	{{accessModifier}} var referenceImages: Set<ARReferenceImage> {
		return ARReferenceImage.referenceImages(in: self)
	}
	
	@available(iOS 12.0, *)
	{{accessModifier}} var referenceObjects: Set<ARReferenceObject> {
		return ARReferenceObject.referenceObjects(in: self)
	}
#endif
}

#if os(iOS)
@available(iOS 11.3, *)
{{accessModifier}} extension ARReferenceImage {
	static func referenceImages(in asset: {{arResourceGroupType}}) -> Set<ARReferenceImage> {
		let bundle = {{bundleToken}}.bundle
		return referenceImages(inGroupNamed: asset.name, bundle: bundle) ?? Set()
	}
}

@available(iOS 12.0, *)
{{accessModifier}} extension ARReferenceObject {
	static func referenceObjects(in asset: {{arResourceGroupType}}) -> Set<ARReferenceObject> {
		let bundle = {{bundleToken}}.bundle
		return referenceObjects(inGroupNamed: asset.name, bundle: bundle) ?? Set()
	}
}
#endif
{% endif %}

{% if resourceCount.color > 0 %}
{{accessModifier}} final class {{colorType}} {
	{{accessModifier}} fileprivate(set) var name: String
	{{accessModifier}} typealias Color = UIColor
	
	@available(iOS 11.0, tvOS 11.0, watchOS 4.0, macOS 10.13, *)
	{{accessModifier}} private(set) lazy var color: Color = {
		guard let color = Color(asset: self) else {
			fatalError("Unable to load color asset named \\(name).")
		}
		return color
	}()
	
	fileprivate init(name: String) {
		self.name = name
	}
}

{{accessModifier}} extension {{colorType}}.Color {
	@available(iOS 11.0, tvOS 11.0, watchOS 4.0, macOS 10.13, *)
	convenience init?(asset: {{colorType}}) {
		let bundle = {{bundleToken}}.bundle
		self.init(named: asset.name, in: bundle, compatibleWith: nil)
	}
}
{% endif %}

{% if resourceCount.data > 0 %}
{{accessModifier}} struct {{dataType}} {
	{{accessModifier}} fileprivate(set) var name: String
	
#if os(iOS) || os(tvOS) || os(macOS)
	@available(iOS 9.0, macOS 10.11, *)
	{{accessModifier}} var data: NSDataAsset {
		guard let data = NSDataAsset(asset: self) else {
			fatalError("Unable to load data asset named \\(name).")
		}
		return data
	}
#endif
}

#if os(iOS) || os(tvOS) || os(macOS)
@available(iOS 9.0, macOS 10.11, *)
{{accessModifier}} extension NSDataAsset {
	convenience init?(asset: {{dataType}}) {
		let bundle = {{bundleToken}}.bundle
		self.init(name: asset.name, bundle: bundle)
	}
}
#endif
{% endif %}

// MARK: - Color Catalogs
{{accessModifier}} extension UIColor {
	{% for category in catalogs where category.name == "Colors" %}
	{% for asset in category.assets %}
	{% for color in asset.items %}
	static let {{color.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}} = {{colorType}}(name: "{{color.value}}").color
	{% endfor %}
	{% endfor %}
	{% endfor %}
}
{% if not param.bundle and not param.lookupFunction %}
// swiftlint:disable convenience_type

private final class BundleToken {
	static let bundle: Bundle = {
		Bundle(for: BundleToken.self)
	}()
}

// swiftlint:enable convenience_type
{% endif %}
{% else %}
// No assets found
{% endif %}
// swiftlint:enable all
// swiftformat:enable all
