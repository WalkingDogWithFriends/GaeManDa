default_platform(:ios)

platform :ios do
  desc "Push a new beta build to TestFlight"
  lane :beta do |options|
    new_version_number = options[:new_version_number]
    new_build_number = options[:new_build_number]
    set_build_info(new_version_number, new_build_number)
    
    match(
      type: "appstore",
      app_identifier:["com.gaemanda"],
      readonly: true
    )

    clear_derived_data

    gym(
      clean: true,
      export_method: "app-store"
    )

    update_and_build_app("PROD")
    upload_to_testflight(skip_waiting_for_build_processing: true)

    download_dsyms(
      app_identifier: "com.gaemanda",
      output_directory: "./Projects/App/Outputs/Archives/PROD"
    )
    
    match(
      type: "appstore",
      app_identifier:["com.gaemanda"],
      readonly: true
    )

    clear_derived_data

    gym(
      clean: true,
      export_method: "app-store"
    )

    update_and_build_app("PROD")
    upload_to_testflight(skip_waiting_for_build_processing: true)

    download_dsyms(
      app_identifier: "com.gaemanda",
      output_directory: "./Projects/App/Outputs/Archives/PROD"
    )
  end

  desc "Push a new production build to TestFlight"
  lane :prod do |options|
    new_version_number = options[:new_version_number]
    new_build_number = options[:new_build_number]
    set_build_info(new_version_number, new_build_number)

    match(
      type: "appstore",
      app_identifier:["com.gaemanda"],
      readonly: true
    )

    clear_derived_data
    
    gym(
      clean: true,
      export_method: "app-store"
    )
    
    update_and_build_app("PROD")
    upload_to_testflight(skip_waiting_for_build_processing: true)

    download_dsyms(
      app_identifier: "com.gaemanda",
      output_directory: "./Projects/App/Outputs/Archives/PROD"
    )
  end

  desc "Push a new dev build to TestFlight"
  lane :dev do |options|
    new_version_number = options[:new_version_number]
    new_build_number = options[:new_build_number]
    set_build_info(new_version_number, new_build_number)

    match(
      type: "appstore",
      app_identifier:["com.gaemanda.dev"],
      readonly: true
    )
    
    clear_derived_data

    gym(
      clean: true,
      export_method: "app-store"
    )

    update_and_build_app("DEV")
    upload_to_testflight(skip_waiting_for_build_processing: true)

    download_dsyms(
      app_identifier: "com.gaemanda.dev",
      output_directory: "./Projects/App/Outputs/Archives/DEV"
    )
  end

  desc "Fetch profiles by using match"
  lane :profiles do
    match(
      type: "appstore",
      app_identifier:["com.gaemanda"],
      readonly: true
    )
    match(
      type: "appstore",
      app_identifier:["com.gaemanda.dev"],
      readonly: true
    )
  end
end

def set_build_info(new_version_number, new_build_number)
  set_xcconfig_value("MARKETING_VERSION", new_version_number)
  increment_build_number(
    xcodeproj: './Projects/App/GaeManda.xcodeproj',
    build_number: new_build_number
  )
end

def set_xcconfig_value(
  targetKey, 
  targetValue, 
  xcconfigs_file_path = '../Projects/App/xcconfigs/GaeManda.shared.xcconfig'
  )
  configs = {}
 
  # read configs
  File.open(xcconfigs_file_path, 'r').each_line do |line|
    value = line.split("=")
    configs[value[0]] = value[1].strip
  end

  # register configs
  configs[targetKey] = targetValue

  # write configs
  File.open(xcconfigs_file_path, 'w') do |out_file|
    configs.each do |key, value|
      out_file.puts "#{key}=#{value}"
    end
  end
end

def update_and_build_app(scheme = "")
  case scheme
  when "PROD"
    update_app_identifier(
      xcodeproj: "./Projects/App/GaeManda.xcodeproj",
      plist_path: "Info.plist",
      app_identifier: "com.gaemanda"
    )

    build_app(
      workspace: "GaeManda.xcworkspace",
      output_directory: "./Projects/App/Outputs/Archives/PROD",
      scheme: "Prod-GaeManda",
      xcargs: "-allowProvisioningUpdates",
      export_options: {
        method: "app-store",
        signingStyle: 'manual',
        provisioningProfiles: {
          "com.gaemanda": "match AppStore com.gaemanda",
        }
      } 
    )

  when "DEV"
    update_app_identifier(
      xcodeproj: "./Projects/App/GaeManda.xcodeproj",
      plist_path: "Info.plist",
      app_identifier: "com.gaemanda.dev"
    )

    build_app(
      workspace: "GaeManda.xcworkspace",
      output_directory: "./Projects/App/Outputs/Archives/DEV",
      scheme: "Dev-GaeManda",
      xcargs: "-allowProvisioningUpdates",
      export_options: {
        method: "app-store",
        signingStyle: 'manual',
        provisioningProfiles: {
          "com.gaemanda.dev": "match AppStore com.gaemanda.dev",
        }
      } 
    )
  else
    throw
  end
end